/** @defgroup MleDPPMaster Magic Lantern Digital Playprint Library API - Master */

/**
 * @file scenechk.h
 * @ingroup MleDPPMaster
 *
 * Magic Lantern Digital Playprint Library API.
 */

// COPYRIGHT_BEGIN
//
// Copyright (c) 2015-2025 Wizzer Works
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
//  For information concerning this header file, contact Mark S. Millard,
//  of Wizzer Works at msm@wizzerworks.com.
//
//  More information concerning Wizzer Works may be found at
//
//      http://www.wizzerworks.com
//
// COPYRIGHT_END

#ifndef __MLE_DPP_SCENECHUNK_H_
#define __MLE_DPP_SCENECHUNK_H_

// Include Digital Playprint header files.
#include "mle/mlTypes.h"
#include "mle/Dpp.h"


/**
 * @brief This class is used to create Scene Chunks for the Magic
 * Lantern Digital Playprint format.
 */
class MleDppSceneChunk
{
  public:

    /**
	 * A constructor that initializes the file nane and endian format
	 * of the chunk file.
	 * 
     * @param filename The name of the chunk generated by the MleDppOutput class in the workprint.
	 * @param isLittle Indicate whether the chunk file should be formatted using the Little
	 * Endian byte format.
	 */
    MleDppSceneChunk(const char* filename, MlBoolean isLittle);

    /**
	 * The destructor.
	 */
    virtual ~MleDppSceneChunk()
	{
		if (m_groupNames != NULL)
			delete m_groupNames;
		fclose(m_fp);
	};

    /**
	 * @brief Get the name of the groups.
	 *
     * @return An inline array of strings is returned.
	 */

    const char* getNames(void)
	{ return m_groupNames; };

    /**
	 * @brief Get the next group name.
	 *
     * This can be used to iterate from one string to the next.
	 *
     * @return The next group name will be returned as a pointer to
	 * a character string. <b>NULL</b> is returned when it runs out of strings.
	 */
   const char *nextName(const char *name);

    /**
	 * @brief Get the number of groups.
	 *
     * @return The number of strings is returned.
	 */
    int countNames(void);

	/**
	 * @brief Load the Scene Chunk
	 *
     * This constructs an scene chunk with each group name replaced
     * with its corresponding index into the chunk; it returns the address and length of the
     * resolved scene chunk.
	 * <p>
     * It is the caller's responsibility to call delete on the method result.
	 * </p>
	 */
     const MlByte *loadChunk(MlInt *length);

 	/**
	 * Override operator new.
	 *
	 * @param tSize The size, in bytes, to allocate.
	 */
	void* operator new(size_t tSize);

	/**
     * Override operator new array.
     *
     * @param tSize The size, in bytes, to allocate.
     */
	void* operator new[](size_t tSize);

	/**
	 * Override operator delete.
	 *
	 * @param p A pointer to the memory to delete.
	 */
    void  operator delete(void *p);

	/**
     * Override operator delete array.
     *
     * @param p A pointer to the memory to delete.
     */
	void  operator delete[](void* p);

  private:

	FILE * m_fp;
	char * m_groupNames;
	MlInt m_nameOffset;
	MlInt m_nameLength;
	MlBoolean m_littleEndian;
	
	const MlByte * m_chunkRef;
	const MlByte * m_chunkStart;
	const MlByte * m_chunkEnd;

	MlByte * m_resolvedChunkPtr;

	MlByte nextChunkByte(void);

	MlByte copyStreamByte(void)
	{ return *m_resolvedChunkPtr++ = nextChunkByte(); };

	MlInt readIndex(void);

	MlInt writeIndex(MlInt index);

	MlInt readInt(void);

	MlInt writeInt(MlInt index);

	MlInt copyIndex()
	{ return writeIndex(readIndex()); };

	MlInt copyInt()
	{ return writeInt(readInt()); };
};

#endif /* __MLE_DPP_SCENECHUNK_H_ */
